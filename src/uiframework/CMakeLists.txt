cmake_minimum_required(VERSION 3.20)
project(uiframework)

# ~~ statically linkable ui framework based on webview

set(WEBVIEW_LIBRARY ${DEPENDENCY_DIR}/webview)
set(UIFRAMEWORK_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/include PARENT_SCOPE)
set(UIFRAMEWORK_LIB_DBG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug/${PROJECT_NAME}.lib PARENT_SCOPE)
set(UIFRAMEWORK_LIB_REL ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/${PROJECT_NAME}.lib PARENT_SCOPE)

file(GLOB_RECURSE SOURCE_FILES CONFIGURE_DEPENDS src/*)
file(GLOB_RECURSE INCLUDE_FILES CONFIGURE_DEPENDS include/*)
add_library(${PROJECT_NAME} ${INCLUDE_FILES} ${SOURCE_FILES})

set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
    LIBRARY_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
    ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

target_include_directories(${PROJECT_NAME}
    PRIVATE ${WEBVIEW_LIBRARY}/WebView2/include
    PRIVATE ${WEBVIEW_LIBRARY}/WIL/include
    PRIVATE ${SHARED_HEADERS}
    PRIVATE include
    PRIVATE ${DEPENDENCY_DIR}/leaguepp-connector/lib/json/single_include) # ...?


target_link_libraries(${PROJECT_NAME}
    PRIVATE ${WEBVIEW_LIBRARY}/WebView2/x64/WebView2LoaderStatic.lib
    PRIVATE Version.lib
    PRIVATE windowsapp.lib)

if(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE /W4 /D "_MBCS")
endif()